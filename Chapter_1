void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Widget Tree Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++; // Updates the state, triggering a rebuild
    });
  }

  @override
  Widget build(BuildContext context) {
  
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Widget Tree Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            CustomStatelessWidget(text: 'Counter Example'),
            SizedBox(height: 20),
            Text(
              'You have pressed the button:',
              style: TextStyle(fontSize: 18),
            ),
            Text(
              '$_counter times',
              style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 20),
            CustomRenderWidget(),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}

class CustomStatelessWidget extends StatelessWidget {
  final String text;

  CustomStatelessWidget({required this.text});

  @override
  Widget build(BuildContext context) {
    return Text(
      text,
      style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.blue),
    );
  }
}

class CustomRenderWidget extends LeafRenderObjectWidget {
  @override
  RenderObject createRenderObject(BuildContext context) {
    return CustomRenderObject();
  }
}

class CustomRenderObject extends RenderBox {
  @override
  void performLayout() {
    size = constraints.constrain(Size(100, 100)); 
  }

  @override
  void paint(PaintingContext context, Offset offset) {
    final Paint paint = Paint()..color = Colors.green;
    context.canvas.drawRect(offset & size, paint);
  }
}
